---
name: docker workflow - build and push docker images to GCR and optionally test with dagster

on:
  workflow_call:
    inputs:
      artifacts_object_name:
        description: 'Name of the artifacts object to pass to docker build job'
        required: false
        type: string
      artifacts_path:
        description: 'Path to use for the artifacts object. Defaults to build/'
        default: 'build/'
        required: false
        type: string
      image_name:
        description: 'Docker image name'
        required: true
        type: string
      directory:
        description: 'Dockerfile directory'
        required: false
        type: string
        default: '.'
      branch:
        description: 'Git branch used for tagging incremental builds of the Docker image'
        default: 'main'
        required: false
        type: string
      gcp_project:
        description: 'GCP project where GCR is located for storing built Docker images'
        required: true
        type: string
      test_dagster:
        description: 'whether or not to test dagster compatibility of built docker image'
        required: false
        default: false
        type: boolean
    secrets:
      SSH_KEY:
        description: 'SSH key used to access private repos during the build'
        required: true
      GCR_RW_SERVICEACCOUNT_KEY:
        description: 'GCR service account credentials to push/pull Docker images'
        required: true

jobs:
  docker-build-test-push:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH Keys and known_hosts
        shell: bash -l {0}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_KEY }}"

      - if: ${{ inputs.artifacts_object_name }}
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts_object_name }}
          path: ${{ inputs.artifacts_path }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.1

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ inputs.gcp_project }}
          service_account_key: ${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}
          export_default_credentials: true

      - name: Use glcoud CLI to configure-docker auth
        run: gcloud auth configure-docker

      - if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: get_tag
        name: Get tag
        run: echo "IMAGE_FULLNAME=eu.gcr.io/${{ inputs.gcp_project }}/${{ inputs.image_name }}:${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build docker image
        uses: docker/build-push-action@v4.0.0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        with:
          context: ${{ inputs.directory }}
          load: true
          tags: test-image
          ssh: default
          provenance: false

      - if: ${{ inputs.test_dagster }}
        name: Find repository.py file
        id: find_repo_file
        run: echo "REPOSITORY_PY_LOCATION=$(find . -maxdepth 2 -name repository.py)" >> $GITHUB_OUTPUT

      - if: ${{ inputs.test_dagster }}
        name: Test Dagster Docker image
        run: |
          docker run -p 8080:8080 -d --env 'TZ=Europe/Brussels' --name test_container test-image \
              dagster api grpc -h 0.0.0.0 -p 8080 --python-file "/dagster/${{ steps.find_repo_file.outputs.REPOSITORY_PY_LOCATION }}"
          sleep 5
          wget -O/tmp/grpc_health_probe -q https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.4.11/grpc_health_probe-linux-amd64
          chmod +x /tmp/grpc_health_probe
          for i in $(seq 1 10); do /tmp/grpc_health_probe -addr=localhost:8080 && s=0 && break || s=$? && sleep 2; done; (docker logs test_container && exit $s)

      - name: Push docker image
        uses: docker/build-push-action@v4.0.0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        with:
          context: ${{ inputs.directory }}
          push: true
          ssh: default
          tags: |
            ${{ format('eu.gcr.io/{0}/{1}:{2}', inputs.gcp_project, inputs.image_name, github.sha) }}
            ${{ github.event_name == 'pull_request' && format('eu.gcr.io/{0}/{1}:pr-{2}', inputs.gcp_project, inputs.image_name, github.event.number) || '' }}
            ${{ github.ref == format('refs/heads/{0}', inputs.branch) && format('eu.gcr.io/{0}/{1}:latest', inputs.gcp_project, inputs.image_name) || '' }}
            ${{ github.ref == format('refs/heads/{0}', inputs.branch) && format('eu.gcr.io/{0}/{1}:stage', inputs.gcp_project, inputs.image_name) || '' }}
            ${{ startsWith(github.ref, 'refs/tags/') && steps.get_tag.outputs.IMAGE_FULLNAME || '' }}
            ${{ startsWith(github.ref, 'refs/tags/') && format('eu.gcr.io/{0}/{1}:prod', inputs.gcp_project, inputs.image_name) || '' }}
          provenance: false # Image attestations not supported in GCR: https://github.com/docker/buildx/issues/1533
