---
name: docker workflow - build and push docker images to GAR and optionally test with dagster

on:
  workflow_call:
    inputs:
      artifacts_object_name:
        description: 'Name of the artifacts object to pass to docker build job'
        required: false
        type: string
      artifacts_path:
        description: 'Path to use for the artifacts object. Defaults to build/'
        default: 'build/'
        required: false
        type: string
      image_name:
        description: 'Docker image name'
        required: true
        type: string
      branch:
        description: 'Git branch used for tagging incremental builds of the Docker image'
        default: 'main'
        required: false
        type: string
      gcp_project:
        description: 'GCP project where GAR is located for storing built Docker images'
        required: true
        type: string
      test_dagster:
        description: 'whether or not to test dagster compatibility of built docker image'
        required: false
        default: false
        type: boolean
      skip_image_push:
        description: 'whether to skip pushing the docker image'
        required: false
        default: false
        type: boolean
      docker_buildx_driver:
        description: 'Driver to use for docker buildx. Set to docker from docker-container to help troubleshoot/fix issues.'
        required: false
        default: 'docker-container'
        type: string

    secrets:
      SSH_KEY:
        description: 'SSH key used to access private repos during the build'
        required: true
      GCR_RW_SERVICEACCOUNT_KEY:
        description: 'Service account credentials to push/pull Docker images'
        required: true
      DOCKER_BUILD_SERVICEACCOUNT_KEY:
        description: 'Service account credentials for building Docker images'
        required: false

jobs:
  docker-build-test-push:
    env:
      IMAGE_NAME: europe-west4-docker.pkg.dev/${{ inputs.gcp_project }}/image/${{ inputs.image_name }}
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup SSH Keys and known_hosts
        shell: bash -l {0}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_KEY }}"

      - name: Import build key
        run: 'echo "${{secrets.DOCKER_BUILD_SERVICEACCOUNT_KEY}}" | base64 -d > /tmp/build_key.json'
        shell: bash -l {0}

      - if: ${{ inputs.artifacts_object_name }}
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.artifacts_object_name }}
          path: ${{ inputs.artifacts_path }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.6.0
        with:
          driver: ${{ inputs.docker_buildx_driver }}

      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Use glcoud CLI to configure-docker auth
        run: gcloud auth configure-docker eu.gcr.io,europe-west4-docker.pkg.dev

      - if: ${{ inputs.test_dagster }}
        name: Build docker image
        uses: docker/build-push-action@v4.0.0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        with:
          context: .
          load: true
          tags: test-image
          ssh: default
          build-args: "GIT_COMMIT=${{ github.sha }},SSH_KEY=${{ secrets.SSH_KEY }}"
          secret-files: BUILD_KEY=/tmp/build_key.json
          provenance: false

      - if: ${{ inputs.test_dagster }}
        name: Find repository.py file
        id: find_repo_file
        run: echo "REPOSITORY_PY_LOCATION=$(find . -maxdepth 2 -name repository.py)" >> $GITHUB_OUTPUT

      - if: ${{ inputs.test_dagster }}
        name: Test Dagster Docker image
        run: |
          docker run -p 8080:8080 -d --env 'TZ=Europe/Brussels' --name test_container test-image \
              dagster api grpc -h 0.0.0.0 -p 8080 --python-file "/dagster/${{ steps.find_repo_file.outputs.REPOSITORY_PY_LOCATION }}"
          sleep 5
          wget -O/tmp/grpc_health_probe -q https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.4.11/grpc_health_probe-linux-amd64
          chmod +x /tmp/grpc_health_probe
          for i in $(seq 1 10); do /tmp/grpc_health_probe -addr=localhost:8080 && s=0 && break || s=$? && sleep 2; done; (docker logs test_container && exit $s)

      - name: Push docker image
        # if either a tag isn't provided, or if the run is scheduled (using automatic docker re-builds) for security
        if: ${{ !startsWith(github.ref, 'refs/tags/') || github.event_name == 'scheduled' }}
        uses: docker/build-push-action@v4.0.0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        with:
          context: .
          push: ${{ !inputs.skip_image_push }}
          ssh: default
          build-args: "GIT_COMMIT=${{ github.sha }}"
          secret-files: BUILD_KEY=/tmp/build_key.json
          tags: |
            "${{ env.IMAGE_NAME }}:${{ github.sha }}"
            ${{ github.event_name == 'pull_request' && format('{0}:pr-{1}', env.IMAGE_NAME, github.event.number) || '' }}
            ${{ github.ref == format('refs/heads/{0}', inputs.branch) && format('{0}:latest', env.IMAGE_NAME) || '' }}
            ${{ github.ref == format('refs/heads/{0}', inputs.branch) && format('{0}:stage', env.IMAGE_NAME) || '' }}
          provenance: false

      # if either a tag is provided, run re-tag the image with prod and the commit hash
      - if: startsWith(github.ref, 'refs/tags/')
        name: Set release tags
        run: |
          gcloud artifacts docker tags add '${{ env.IMAGE_NAME }}:${{ github.sha }}' '${{ env.IMAGE_NAME }}:${{ github.ref_name }}'
          gcloud artifacts docker tags add '${{ env.IMAGE_NAME }}:${{ github.sha }}' '${{ env.IMAGE_NAME }}:prod'
