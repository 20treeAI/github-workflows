---
name: Dagster workflow - build, test and push a docker image for dagster to GAR. Also supports deploying a developer environment to GKE for testing.

on:
  workflow_call:
    inputs:
      image_name:
        description: "Docker image name"
        required: true
        type: string
      branch:
        description: "Git branch used for tagging incremental builds of the Docker image"
        default: "main"
        required: false
        type: string
      docker_buildx_driver:
        description: "Driver to use for docker buildx. Set to docker from docker-container to help troubleshoot/fix issues."
        required: false
        default: "docker-container"
        type: string
      gcp_project:
        description: "GCP project where GKE/GAR are located for storing built Docker images"
        required: true
        type: string
      gcp_location:
        description: "Location where GKE is located for storing built Docker images"
        required: false
        default: "europe-west4"
        type: string
      cluster_name:
        description: "K8s cluster name on which Dagster jobs are deployed to"
        required: true
        type: string
      stage_cluster_name:
        description: "K8s stage cluster name on which Dagster jobs are deployed to"
        required: true
        type: string
      stage_cluster_domain:
        description: "FQDN for URL for cluster running dagster"
        type: string
        required: true
      stage_dagster_service_account_name:
        description: "k8s service account used for dagster"
        type: string
        required: true
      stage_auth_domain:
        description: "FQDN for authentication URL for cluster running dagster"
        type: string
        required: true
      dagster_version:
        description: "Version of dagster to deploy helm chart for"
        type: string
        default: "1.5.12"
        required: false

    secrets:
      SSH_KEY:
        description: "SSH key used to access private repos during the build"
        required: true
      GCR_RW_SERVICEACCOUNT_KEY:
        description: "Service account credentials to push/pull Docker images"
        required: true
      DOCKER_BUILD_SERVICEACCOUNT_KEY:
        description: "Service account credentials for building Docker images"
        required: false

jobs:
  run-docker-workflow:
    # only run on synchronize PR event, meaning something has been pushed to the PR branch
    if: github.event_name == 'push' || contains(fromJSON('["opened", "synchronize", "reopened", "push"]'), github.event.action) || (github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'dev-env')
    # query our reusable docker build and push workflow
    uses: 20treeAI/github-workflows/.github/workflows/docker_build_push.yml@main
    with:
      image_name: ${{ inputs.image_name }}
      branch: ${{ inputs.branch }}
      gcp_project: ${{ inputs.gcp_project }}
      test_dagster: true
      docker_buildx_driver: ${{ inputs.docker_buildx_driver }}
    secrets:
      SSH_KEY: ${{ secrets.SSH_KEY }}
      GCR_RW_SERVICEACCOUNT_KEY: ${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}
      DOCKER_BUILD_SERVICEACCOUNT_KEY: ${{secrets.DOCKER_BUILD_SERVICEACCOUNT_KEY}}

  deploy-to-gke:
    if: ${{ github.event_name == 'push' }}
    needs: run-docker-workflow
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}"

      - uses: "google-github-actions/get-gke-credentials@v1"
        name: "Get GKE cluster credentials"
        with:
          cluster_name: ${{ startsWith(github.ref, 'refs/tags/') && inputs.cluster_name || inputs.stage_cluster_name }}
          location: ${{ inputs.gcp_location }}

      - name: Deploy to cluster
        run: |
          kubectl rollout restart deployment -n dagster dagster-dagster-user-deployments-${{ inputs.image_name }}
          kubectl rollout status deployment -n dagster dagster-dagster-user-deployments-${{ inputs.image_name }} -w --timeout=10m && echo "Deployment completed" || ( kubectl logs -n dagster -l deployment=${{ inputs.image_name }} && exit 1 )

  deploy-dev-env-to-gke:
    if: github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'dev-env'
    runs-on: ubuntu-latest
    needs: run-docker-workflow
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}"

      - uses: "google-github-actions/get-gke-credentials@v1"
        name: "Get GKE cluster credentials"
        with:
          cluster_name: ${{ inputs.stage_cluster_name }}
          location: ${{ inputs.gcp_location }}

      - name: Find repository.py file for helm deployment
        id: find_repo_file
        run: echo "REPOSITORY_PY_LOCATION=$(find . -maxdepth 2 -name repository.py)" >> $GITHUB_OUTPUT

      - name: Install dagster helm chart for developer environment
        uses: vimeda/helm@v1.7.0
        with:
          helm: helm3
          repo: "https://dagster-io.github.io/helm"
          repo-alias: "dagster"
          chart: "dagster/dagster"
          release: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}"
          namespace: "dagster"
          chart-version: "${{ inputs.dagster_version }}"
          timeout: 30m0s
          atomic: false
          values: |
            dagsterDaemon:
              nodeSelector:
                cloud.google.com/gke-nodepool: core
              runMonitoring:
                enabled: true
                startTimeoutSeconds: 600
            dagit:
              nodeSelector:
                cloud.google.com/gke-nodepool: core
              livenessProbe:
                httpGet:
                  path: "/dagit_info"
                  port: 80
                periodSeconds: 20
                timeoutSeconds: 3
                successThreshold: 1
                failureThreshold: 3
              startupProbe:
                enabled: true
                httpGet:
                  path: "/dagit_info"
                  port: 80
                periodSeconds: 20
                timeoutSeconds: 3
                successThreshold: 1
                failureThreshold: 3
            global:
              postgresqlSecretName: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}-psql-secret"
              serviceAccountName: ${{ inputs.stage_dagster_service_account_name }}
            dagster-user-deployments:
              deployments:
                - name: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}"
                  image:
                    repository: ${{ format('europe-west4-docker.pkg.dev/{0}/image/{1}', inputs.gcp_project, inputs.image_name) }}
                    tag: ${{ format('pr-{0}', github.event.number) }}
                    pullPolicy: Always
                  dagsterApiGrpcArgs:
                    - "--python-file"
                    - "/dagster/${{ steps.find_repo_file.outputs.REPOSITORY_PY_LOCATION }}"
                  port: 3030
                  nodeSelector:
                    cloud.google.com/gke-nodepool: core
                  labels:
                    dev-environment.${{ inputs.stage_cluster_domain }}/deploysha: "${{ github.sha }}"
            ingress:
              enabled: true
              annotations:
                kubernetes.io/ingress.class: ingress-nginx
                cert-manager.io/cluster-issuer: letsencrypt
                nginx.ingress.kubernetes.io/auth-signin: "https://${{ inputs.stage_auth_domain }}/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err"
                nginx.ingress.kubernetes.io/auth-url: "https://${{ inputs.stage_auth_domain }}/validate"
                nginx.ingress.kubernetes.io/auth-response-headers: X-Vouch-User
                nginx.ingress.kubernetes.io/auth-snippet: |
                  auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
                  auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
                  auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
              dagit:
                host: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}.${{ inputs.stage_cluster_domain }}"
                path: "/"
                tls:
                  enabled: true
                  secretName: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}-ssl-secret"
            serviceAccount:
              create: false
            postgresql:
              enabled: true
              master:
                annotations:
                  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
                nodeSelector:
                  cloud.google.com/gke-nodepool: core

      - if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'dev-env') }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: dev-env-location
          message: |
            :rocket: Release deployed to <https://${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}.${{ inputs.stage_cluster_domain }}>
            The first deployment will take a couple of minutes. Sit tight

  cleanup-dev-env:
    # if dev-env label is removed from PR, or PR is closed, remove the dev-env from the cluster
    if: github.event_name == 'pull_request' && (github.event.action == 'closed' || (github.event.action == 'unlabeled' && github.event.label.name == 'dev-env'))
    runs-on: ubuntu-latest
    steps:
      - id: "auth"
        name: "Authenticate to Google Cloud"
        uses: "google-github-actions/auth@v1"
        with:
          credentials_json: "${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}"
      - uses: "google-github-actions/get-gke-credentials@v1"
        name: "Get GKE cluster credentials from Google Cloud"
        with:
          cluster_name: ${{ inputs.stage_cluster_name }}
          location: ${{ inputs.gcp_location }}
      - name: "Remove dev environment from GKE"
        uses: vimeda/helm@v1.7.0
        with:
          task: "remove"
          helm: helm3
          repo: "https://dagster-io.github.io/helm"
          repo-alias: "dagster"
          chart: "dagster/dagster"
          release: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}"
          namespace: "dagster"
          timeout: 30m0s
      # this has to be done manually to clean up the postgresql PVC
      - name: "Remove dev environment Persistent Volume Claim"
        run: kubectl delete pvc -n dagster -l release=${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}
      - uses: marocchino/sticky-pull-request-comment@v2
        name: "Remove PR comment for dev-env"
        with:
          header: dev-env-location
          delete: true
