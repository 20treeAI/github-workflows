---
name: Dagster workflow - build, push and deploy a Dagster workflow to K8s

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Docker image name'
        required: true
        type: string
      branch:
        description: 'Git branch used for tagging incremental builds of the Docker image'
        default: 'master'
        required: false
        type: string
      gcp_project:
        description: 'GCP project where GCR is located for storing built Docker images'
        required: true
        default: ''
        type: string
      cluster_name:
        description: 'K8s cluster name on which Dagster workflow is deployed to'
        required: true
        type: string
    secrets:
      SSH_KEY:
        description: 'SSH key used to access private repos during the build'
        required: true
      GCR_RW_SERVICEACCOUNT_KEY:
        description: 'GCR service account credentials to push/pull Docker images'
        required: true

env:
  AUTH_URL: auth.stage-elm.overstory.ai

jobs:
  cleanup-pr:
    if: github.event.action == 'closed' || ( github.event.action == 'unlabeled' && !contains(github.event.pull_request.labels.*.name, 'dev-env') )
    runs-on: ubuntu-latest
    steps:
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ inputs.gcp_project }}
          service_account_key: ${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}
          export_default_credentials: true
      - uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ format('stage-{0}', inputs.cluster_name) }}
          location: europe-west4
      - name: 'Remove dev-environment'
        uses: AndreaGiardini/helm@master # Should be replaced with deliverybot/helm@v1 when https://github.com/deliverybot/helm/issues/66 is fixed
        with:
          task: 'remove'
          helm: helm3
          repository: 'https://dagster-io.github.io/helm'
          chart: 'dagster'
          release: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}"
          namespace: 'dagster'
      - uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: dev-env-location
          delete: true

  docker:
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup SSH Keys and known_hosts
        shell: bash -l {0}
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-add - <<< "${{ secrets.SSH_KEY }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.4.1

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ inputs.gcp_project }}
          service_account_key: ${{ secrets.GCR_RW_SERVICEACCOUNT_KEY }}
          export_default_credentials: true

      - name: Configure Docker
        run: gcloud auth configure-docker

      - if: ${{ startsWith(github.ref, 'refs/tags/') }}
        id: get_tag
        name: Get tag
        run: echo ::set-output name=IMAGE_FULLNAME::eu.gcr.io/${{ inputs.gcp_project }}/${{ inputs.image_name }}:${GITHUB_REF#refs/tags/}

      - name: Build docker image
        uses: docker/build-push-action@v4.0.0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        with:
          context: .
          load: true
          tags: test-image
          ssh: default

      - name: Find repository.py file
        id: find_repo_file
        run: echo ::set-output name=REPOSITORY_PY_LOCATION::$(find . -maxdepth 2 -name repository.py)

      - name: Test docker image
        run: |
          docker run -p 8080:8080 -d --name test_container test-image \
              dagster api grpc -h 0.0.0.0 -p 8080 --python-file "/dagster/${{ steps.find_repo_file.outputs.REPOSITORY_PY_LOCATION }}"
          sleep 5
          wget -O/tmp/grpc_health_probe -q https://github.com/grpc-ecosystem/grpc-health-probe/releases/download/v0.4.11/grpc_health_probe-linux-amd64
          chmod +x /tmp/grpc_health_probe
          for i in $(seq 1 10); do /tmp/grpc_health_probe -addr=localhost:8080 && s=0 && break || s=$? && sleep 2; done; (docker logs test_container && exit $s)

      - name: Push docker image
        uses: docker/build-push-action@v4.0.0
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        with:
          context: .
          push: true
          ssh: default
          tags: |
            ${{ github.event_name == 'pull_request' && format('eu.gcr.io/{0}/{1}:pr-{2}', inputs.gcp_project, inputs.image_name, github.event.number) || '' }}
            ${{ github.ref == format('refs/heads/{0}', inputs.branch) && format('eu.gcr.io/{0}/{1}:latest', inputs.gcp_project, inputs.image_name) || '' }}
            ${{ github.ref == format('refs/heads/{0}', inputs.branch) && format('eu.gcr.io/{0}/{1}:stage', inputs.gcp_project, inputs.image_name) || '' }}
            ${{ startsWith(github.ref, 'refs/tags/') && steps.get_tag.outputs.IMAGE_FULLNAME || '' }}
            ${{ startsWith(github.ref, 'refs/tags/') && format('eu.gcr.io/{0}/{1}:prod', inputs.gcp_project, inputs.image_name) || '' }}
          provenance: false # Image attestations not supported in GCR: https://github.com/docker/buildx/issues/1533

      - uses: google-github-actions/get-gke-credentials@v0.3.0
        with:
          cluster_name: ${{ startsWith(github.ref, 'refs/tags/') && inputs.cluster_name || format('stage-{0}', inputs.cluster_name) }}
          location: europe-west4

      - if: ${{ github.event_name == 'push' }}
        name: Deploy to cluster
        run: |
          kubectl rollout restart deployment -n dagster dagster-dagster-user-deployments-${{ inputs.image_name }}
          kubectl rollout status deployment -n dagster dagster-dagster-user-deployments-${{ inputs.image_name }} -w --timeout=10m && echo "Deployment completed" || ( kubectl logs -n dagster -l deployment=${{ inputs.image_name }} && exit 1 )

      - if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'dev-env') }}
        name: Deploy dev environment
        uses: AndreaGiardini/helm@master # Should be replaced with deliverybot/helm@v1 when https://github.com/deliverybot/helm/issues/66 is fixed
        with:
          helm: helm3
          repository: 'https://dagster-io.github.io/helm'
          chart: 'dagster'
          release: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}"
          namespace: 'dagster'
          chartVersion: '0.15.10'
          values: |
            dagsterDaemon:
              nodeSelector:
                cloud.google.com/gke-nodepool: core
              runMonitoring:
                enabled: true
                startTimeoutSeconds: 300
            dagit:
              nodeSelector:
                cloud.google.com/gke-nodepool: core
              livenessProbe:
                httpGet:
                  path: "/dagit_info"
                  port: 80
                periodSeconds: 20
                timeoutSeconds: 3
                successThreshold: 1
                failureThreshold: 3
              startupProbe:
                enabled: true
                httpGet:
                  path: "/dagit_info"
                  port: 80
                periodSeconds: 20
                timeoutSeconds: 3
                successThreshold: 1
                failureThreshold: 3
            global:
              postgresqlSecretName: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}-psql-secret"
              serviceAccountName: stage-elm-dagster
            dagster-user-deployments:
              deployments:
                - name: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}"
                  image:
                    repository: ${{ format('eu.gcr.io/{0}/{1}', inputs.gcp_project, inputs.image_name) }}
                    tag: ${{ format('pr-{0}', github.event.number) }}
                    pullPolicy: Always
                  dagsterApiGrpcArgs:
                    - "--python-file"
                    - "/dagster/${{ steps.find_repo_file.outputs.REPOSITORY_PY_LOCATION }}"
                  port: 3030
                  nodeSelector:
                    cloud.google.com/gke-nodepool: core
                  labels:
                    dev-environment.overstory.io/deploysha: "${{ github.sha }}"
            ingress:
              enabled: true
              annotations:
                kubernetes.io/ingress.class: ingress-nginx
                cert-manager.io/cluster-issuer: letsencrypt
                nginx.ingress.kubernetes.io/auth-signin: "https://${{ env.AUTH_URL }}/login?url=$scheme://$http_host$request_uri&vouch-failcount=$auth_resp_failcount&X-Vouch-Token=$auth_resp_jwt&error=$auth_resp_err"
                nginx.ingress.kubernetes.io/auth-url: "https://${{ env.AUTH_URL }}/validate"
                nginx.ingress.kubernetes.io/auth-response-headers: X-Vouch-User
                nginx.ingress.kubernetes.io/auth-snippet: |
                  auth_request_set $auth_resp_jwt $upstream_http_x_vouch_jwt;
                  auth_request_set $auth_resp_err $upstream_http_x_vouch_err;
                  auth_request_set $auth_resp_failcount $upstream_http_x_vouch_failcount;
              dagit:
                host: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}.stage-elm.overstory.ai"
                path: "/"
                tls:
                  enabled: true
                  secretName: "${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}-ssl-secret"
            pipelineRun:
              env:
                ELM_ENVIRONMENT: 'development'
            serviceAccount:
              create: false
            postgresql:
              enabled: true
              master:
                annotations:
                  cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
                nodeSelector:
                  cloud.google.com/gke-nodepool: core

      - if: ${{ github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'dev-env') }}
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: dev-env-location
          message: |
            :rocket: Release deployed to <https://${{ format('{0}-pr-{1}', inputs.image_name, github.event.number) }}.stage-elm.overstory.ai>
            The first deployment will take a couple of minutes. Sit tight
